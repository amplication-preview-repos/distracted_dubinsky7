/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Alarm } from "./Alarm";
import { AlarmCountArgs } from "./AlarmCountArgs";
import { AlarmFindManyArgs } from "./AlarmFindManyArgs";
import { AlarmFindUniqueArgs } from "./AlarmFindUniqueArgs";
import { CreateAlarmArgs } from "./CreateAlarmArgs";
import { UpdateAlarmArgs } from "./UpdateAlarmArgs";
import { DeleteAlarmArgs } from "./DeleteAlarmArgs";
import { AlarmService } from "../alarm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Alarm)
export class AlarmResolverBase {
  constructor(
    protected readonly service: AlarmService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Alarm",
    action: "read",
    possession: "any",
  })
  async _alarmsMeta(
    @graphql.Args() args: AlarmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Alarm])
  @nestAccessControl.UseRoles({
    resource: "Alarm",
    action: "read",
    possession: "any",
  })
  async alarms(@graphql.Args() args: AlarmFindManyArgs): Promise<Alarm[]> {
    return this.service.alarms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Alarm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Alarm",
    action: "read",
    possession: "own",
  })
  async alarm(
    @graphql.Args() args: AlarmFindUniqueArgs
  ): Promise<Alarm | null> {
    const result = await this.service.alarm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Alarm)
  @nestAccessControl.UseRoles({
    resource: "Alarm",
    action: "create",
    possession: "any",
  })
  async createAlarm(@graphql.Args() args: CreateAlarmArgs): Promise<Alarm> {
    return await this.service.createAlarm({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Alarm)
  @nestAccessControl.UseRoles({
    resource: "Alarm",
    action: "update",
    possession: "any",
  })
  async updateAlarm(
    @graphql.Args() args: UpdateAlarmArgs
  ): Promise<Alarm | null> {
    try {
      return await this.service.updateAlarm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Alarm)
  @nestAccessControl.UseRoles({
    resource: "Alarm",
    action: "delete",
    possession: "any",
  })
  async deleteAlarm(
    @graphql.Args() args: DeleteAlarmArgs
  ): Promise<Alarm | null> {
    try {
      return await this.service.deleteAlarm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
